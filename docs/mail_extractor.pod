=head1 COMMAND-LINE OPTIONS

    -c, --config=<path>    path to config file (mandatory)
    -h, --help             this help screen
        --parse-pdf        parse PDF (experimental)
    -V, --version          print version

=over 4

=item * C<< -c, --config=<path> >>

Path to configuration file (mandatory).

=item * C<-h, --help>

Show usage screen.

=item * C<--parse-pdf>

Enable parsing PDFs (experimental).

=item * C<-V, --version>

Print version of script.

=back

=head1 CONFIGURATION FILE

=head2 Format

The configuration file format allows for either a single-, multi-, comment- or blank-line entry.

Each single-line entry must adhere to following format:

    key = 'value'
    # or
    key = "value"

Each multi-line entry must adhere to following format:

    key = (
        'value1'
        "value2"
        ..
    )

Each comment-line entry may begin with whitespace and must be followed by #.

Each blank-line entry is either a whitespace-only or an entirely empty line.

A valid configuration file with sample values looks as follows:

    source_path = '/path/to/directory'
    output_path = '/path/to/directory'
    log_file    = '/path/to/file'
    excludes    = (
    )
    filter      = (
        'no-?reply'
    )

=head2 Diagnostics

All following diagnostics emitted are fatal (followed by the immediate termination of the script).

=over 4

=item * C<unbalanced quotes>

Quotes are mixed, e.g. C<'"> or C<"'>.

=item * C<bad value>

Value is not fully quoted or empty.

=item * C<not multi-line>

The multi-line value does not span multiple lines.

=item * C<cannot be parsed>

The line in question does not match any pattern.

=item * C<key not exists>

The mandatory key does not exist.

=item * C<wrong value type>

The value's type (single/multi-line) is wrong.

=item * C<is empty string>

The value is an empty string.

=item * C<not a directory>

The value is not a directory.

=item * C<not a file>

The value is not a regular file.

=back

=head1 LOGGING

=head2 Diagnostics

=head3 General

=over 4

=item * C<< Start of <script>. >>

Script started.

=item * C<< End of <script>. >>

Script ended.

=back

=head3 Plain

=over 4

=item * C<< Plain: <file>: cannot be opened: <error> >>

Plaintext source file cannot be opened. Prints error. Skips.

=back

=head3 JSON

=over 4

=item * C<< JSON: <file>: cannot be opened: <error> >>

JSON source file cannot be opened. Prints error. Skips.

=item * C<< JSON: <file>: decode_json() failed >>

JSON source file failed to be decoded with JSON module's decode_json() function. Skips.

=item * C<< JSON: <file>: client_metadata does not exist >>

JSON data structure has no key 'client_metadata'. Skips.

=item * C<< JSON: <file>: displayName and emailAddresses does not exist >>

JSON data structure has no subkey 'displayName' and 'emailAddresses'. Skips.

=back

=head3 PDF

=over 4

=item * C<< PDF: <file>: new() failed >>

PDF source file failed to be loaded with CAM::PDF module's new() constructor. Skips.

=item * C<< PDF: <file>: numPages() failed >>

PDF object failed to be processed with CAM::PDF module's numPages() method. Skips.

=item * C<< PDF: <file>: render() failed >>

PDF tree failed to be processed with CAM::PDF::PageText module's render() method. Skips.

=back
